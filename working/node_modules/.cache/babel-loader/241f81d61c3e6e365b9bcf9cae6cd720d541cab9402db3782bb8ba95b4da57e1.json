{"ast":null,"code":"var _jsxFileName = \"/Users/clayreimus/Documents/KellyCalc/kelly-criterion-calculator/src/App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport Chart from './Chart';\nimport './style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BankrollChart(props) {\n  _s();\n  const chartContainer = useRef(null);\n  const [chart, setChart] = useState(null);\n  useEffect(() => {\n    if (chartContainer && chartContainer.current) {\n      const data = props.data;\n      const chartConfig = {\n        type: 'line',\n        data: {\n          labels: data.labels,\n          datasets: [{\n            label: 'Bankroll Growth Over Time',\n            data: data.values,\n            fill: false,\n            borderColor: 'rgb(75, 192, 192)',\n            tension: 0.1\n          }]\n        },\n        options: {\n          scales: {\n            x: {\n              title: {\n                display: true,\n                text: 'Bankroll in Dollars'\n              },\n              ticks: {\n                beginAtZero: true\n              }\n            },\n            y: {\n              title: {\n                display: true,\n                text: 'Number of Bets'\n              },\n              ticks: {\n                beginAtZero: true\n              }\n            }\n          }\n        }\n      };\n      const newChart = new Chart(chartContainer.current, chartConfig);\n      setChart(newChart);\n    }\n  }, [props.data]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: chartContainer\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 10\n  }, this);\n}\n_s(BankrollChart, \"rfdWDST3O5ikwqLrFTCfO6t9+wU=\");\n_c = BankrollChart;\nfunction App() {\n  _s2();\n  const [bankroll, setBankroll] = useState(100);\n  const [payoff, setPayoff] = useState(1);\n  const [probability, setProbability] = useState(0.6);\n  const [bets, setbets] = useState(1);\n  const [result, setResult] = useState('');\n  const [chartData, setChartData] = useState({});\n  const handleSubmit = event => {\n    event.preventDefault();\n    const f = (payoff * probability - (1 - probability)) / payoff;\n    const betFraction = Math.min(f, 1);\n    const wagerAmount = betFraction * bankroll;\n    const expectedGrowthRate = 1 + betFraction * probability;\n    const finalBankroll = bankroll * expectedGrowthRate ** bets;\n    if (betFraction <= 0) {\n      setResult('This bet has a negative EV. This calculator is only helpful for bet sizing in games where the player believes they have an edge.');\n    } else {\n      const roundedBetFraction = Math.round(betFraction * 100);\n      setResult(`Bet ${roundedBetFraction}% of your bankroll per bet, starting with $${wagerAmount.toFixed(2)}. Your expected bankroll after ${bets} bet(s) is $${finalBankroll.toFixed(2)}.`);\n      const bankrollValues = [];\n      const bankrollLabels = [];\n      let bankrollValue = bankroll;\n      for (let i = 0; i <= bets; i++) {\n        bankrollLabels.push(bankrollValue.toFixed(2));\n        bankrollValues.push(i);\n        bankrollValue *= expectedGrowthRate;\n      }\n      setChartData({\n        values: bankrollValues,\n        labels: bankrollLabels\n      });\n    }\n  };\n  const handleProbabilityChange = e => {\n    const inputValue = e.target.value.replace('%', '');\n    const percentageValue = parseFloat(inputValue) / 100;\n    if (!isNaN(percentageValue)) {\n      setProbability(percentageValue);\n    }\n  };\n  const probabilityNumber = parseFloat(probability);\n  const probabilityFormatted = (probabilityNumber * 100).toFixed(0) + '%';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Kelly Criterion Calculator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"The Kelly Criterion is a formula used to determine the optimal bet size based on an estimated probability of winning and net payout odds.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"The calculator will recommend a bet size and provide an estimate of your expected bankroll growth if you follow the recommended sizing for a specified number of bets.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"bankroll\",\n        children: \"Starting Bankroll:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"bankroll\",\n        name: \"bankroll\",\n        value: `$${bankroll}`,\n        onChange: e => setBankroll(parseFloat(e.target.value.replace('$', ''))),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"payoff\",\n        children: \"Net Payout Odds (X:1):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        id: \"payoff\",\n        name: \"payoff\",\n        value: payoff,\n        onChange: e => setPayoff(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"probability\",\n        children: \"Probability of Winning:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"probability\",\n        name: \"probability\",\n        maxLength: \"4\",\n        pattern: \"^[0-9]{1,3}%?$\",\n        value: probabilityFormatted,\n        onChange: handleProbabilityChange,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"bets\",\n        children: \"Number of Bets:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        id: \"bets\",\n        name: \"bets\",\n        value: bets,\n        onChange: e => setbets(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Calculate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"result\",\n      children: result\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"chart\",\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        data: {\n          labels: chartData.labels,\n          datasets: [{\n            data: chartData.values,\n            borderColor: 'rgba(75,192,192,1)',\n            borderWidth: 2,\n            pointRadius: 0\n          }]\n        },\n        options: {\n          scales: {\n            xAxes: [{\n              scaleLabel: {\n                display: true,\n                labelString: 'Bankroll ($)'\n              }\n            }],\n            yAxes: [{\n              scaleLabel: {\n                display: true,\n                labelString: 'Number of Bets'\n              }\n            }]\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n}\n_s2(App, \"IXy1u37vmmTdSMf7oXlcBXEsyds=\");\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"BankrollChart\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Chart","jsxDEV","_jsxDEV","BankrollChart","props","_s","chartContainer","chart","setChart","current","data","chartConfig","type","labels","datasets","label","values","fill","borderColor","tension","options","scales","x","title","display","text","ticks","beginAtZero","y","newChart","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","App","_s2","bankroll","setBankroll","payoff","setPayoff","probability","setProbability","bets","setbets","result","setResult","chartData","setChartData","handleSubmit","event","preventDefault","f","betFraction","Math","min","wagerAmount","expectedGrowthRate","finalBankroll","roundedBetFraction","round","toFixed","bankrollValues","bankrollLabels","bankrollValue","i","push","handleProbabilityChange","e","inputValue","target","value","replace","percentageValue","parseFloat","isNaN","probabilityNumber","probabilityFormatted","className","children","onSubmit","htmlFor","id","name","onChange","required","maxLength","pattern","Line","borderWidth","pointRadius","xAxes","scaleLabel","labelString","yAxes","_c2","$RefreshReg$"],"sources":["/Users/clayreimus/Documents/KellyCalc/kelly-criterion-calculator/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport Chart from './Chart'\nimport './style.css'\n\nfunction BankrollChart(props) {\n  const chartContainer = useRef(null)\n  const [chart, setChart] = useState(null)\n\n  useEffect(() => {\n    if (chartContainer && chartContainer.current) {\n      const data = props.data\n      const chartConfig = {\n        type: 'line',\n        data: {\n          labels: data.labels,\n          datasets: [\n            {\n              label: 'Bankroll Growth Over Time',\n              data: data.values,\n              fill: false,\n              borderColor: 'rgb(75, 192, 192)',\n              tension: 0.1,\n            },\n          ],\n        },\n        options: {\n          scales: {\n            x: {\n              title: {\n                display: true,\n                text: 'Bankroll in Dollars',\n              },\n              ticks: {\n                beginAtZero: true,\n              },\n            },\n            y: {\n              title: {\n                display: true,\n                text: 'Number of Bets',\n              },\n              ticks: {\n                beginAtZero: true,\n              },\n            },\n          },\n        },\n      }\n      const newChart = new Chart(chartContainer.current, chartConfig)\n      setChart(newChart)\n    }\n  }, [props.data])\n\n  return <canvas ref={chartContainer} />\n}\n\nfunction App() {\n  const [bankroll, setBankroll] = useState(100)\n  const [payoff, setPayoff] = useState(1)\n  const [probability, setProbability] = useState(0.6)\n  const [bets, setbets] = useState(1)\n  const [result, setResult] = useState('')\n  const [chartData, setChartData] = useState({})\n\n  const handleSubmit = (event) => {\n    event.preventDefault()\n\n    const f = (payoff * probability - (1 - probability)) / payoff\n    const betFraction = Math.min(f, 1)\n    const wagerAmount = betFraction * bankroll\n    const expectedGrowthRate = 1 + betFraction * probability\n    const finalBankroll = bankroll * expectedGrowthRate ** bets\n\n    if (betFraction <= 0) {\n      setResult(\n        'This bet has a negative EV. This calculator is only helpful for bet sizing in games where the player believes they have an edge.'\n      )\n    } else {\n      const roundedBetFraction = Math.round(betFraction * 100)\n      setResult(\n        `Bet ${roundedBetFraction}% of your bankroll per bet, starting with $${wagerAmount.toFixed(\n          2\n        )}. Your expected bankroll after ${bets} bet(s) is $${finalBankroll.toFixed(\n          2\n        )}.`\n      )\n\n      const bankrollValues = []\n      const bankrollLabels = []\n      let bankrollValue = bankroll\n      for (let i = 0; i <= bets; i++) {\n        bankrollLabels.push(bankrollValue.toFixed(2))\n        bankrollValues.push(i)\n        bankrollValue *= expectedGrowthRate\n      }\n      setChartData({ values: bankrollValues, labels: bankrollLabels })\n    }\n  }\n\n  const handleProbabilityChange = (e) => {\n    const inputValue = e.target.value.replace('%', '')\n    const percentageValue = parseFloat(inputValue) / 100\n    if (!isNaN(percentageValue)) {\n      setProbability(percentageValue)\n    }\n  }\n\n  const probabilityNumber = parseFloat(probability)\n  const probabilityFormatted = (probabilityNumber * 100).toFixed(0) + '%'\n\n  return (\n    <div className=\"container\">\n      <h1>Kelly Criterion Calculator</h1>\n      <p>\n        The Kelly Criterion is a formula used to determine the optimal bet size\n        based on an estimated probability of winning and net payout odds.\n      </p>\n      <p>\n        The calculator will recommend a bet size and provide an estimate of your\n        expected bankroll growth if you follow the recommended sizing for a\n        specified number of bets.\n      </p>\n\n      <form onSubmit={handleSubmit}>\n        <label htmlFor=\"bankroll\">Starting Bankroll:</label>\n        <input\n          type=\"text\"\n          id=\"bankroll\"\n          name=\"bankroll\"\n          value={`$${bankroll}`}\n          onChange={(e) =>\n            setBankroll(parseFloat(e.target.value.replace('$', '')))\n          }\n          required\n        />\n\n        <label htmlFor=\"payoff\">Net Payout Odds (X:1):</label>\n        <input\n          type=\"number\"\n          id=\"payoff\"\n          name=\"payoff\"\n          value={payoff}\n          onChange={(e) => setPayoff(e.target.value)}\n          required\n        />\n\n        <label htmlFor=\"probability\">Probability of Winning:</label>\n        <input\n          type=\"text\"\n          id=\"probability\"\n          name=\"probability\"\n          maxLength=\"4\"\n          pattern=\"^[0-9]{1,3}%?$\"\n          value={probabilityFormatted}\n          onChange={handleProbabilityChange}\n          required\n        />\n\n        <label htmlFor=\"bets\">Number of Bets:</label>\n        <input\n          type=\"number\"\n          id=\"bets\"\n          name=\"bets\"\n          value={bets}\n          onChange={(e) => setbets(e.target.value)}\n          required\n        />\n\n        <button type=\"submit\">Calculate</button>\n      </form>\n\n      <div id=\"result\">{result}</div>\n\n      <div id=\"chart\">\n        <Line\n          data={{\n            labels: chartData.labels,\n            datasets: [\n              {\n                data: chartData.values,\n                borderColor: 'rgba(75,192,192,1)',\n                borderWidth: 2,\n                pointRadius: 0,\n              },\n            ],\n          }}\n          options={{\n            scales: {\n              xAxes: [\n                {\n                  scaleLabel: {\n                    display: true,\n                    labelString: 'Bankroll ($)',\n                  },\n                },\n              ],\n              yAxes: [\n                {\n                  scaleLabel: {\n                    display: true,\n                    labelString: 'Number of Bets',\n                  },\n                },\n              ],\n            },\n          }}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}