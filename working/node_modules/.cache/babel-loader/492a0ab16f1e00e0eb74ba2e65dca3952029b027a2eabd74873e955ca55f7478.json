{"ast":null,"code":"var _jsxFileName = \"/Users/clayreimus/Documents/KellyCalc/kelly-criterion-calculator/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [bankroll, setBankroll] = useState(100);\n  const [payoff, setPayoff] = useState(1);\n  const [probability, setProbability] = useState(0.6);\n  const [bets, setbets] = useState(1);\n  const [result, setResult] = useState('');\n  const handleSubmit = event => {\n    event.preventDefault();\n    const f = (payoff * probability - (1 - probability)) / payoff;\n    const betFraction = Math.min(f, 1);\n    const wagerAmount = betFraction * bankroll;\n    const expectedGrowthRate = 1 + betFraction * probability;\n    const finalBankroll = bankroll * expectedGrowthRate ** bets;\n    if (betFraction <= 0) {\n      setResult('This bet has a negative expected value. This calculator is only helpful for bet sizing in games where the player believes they have an edge.');\n    } else {\n      setResult(`Bet ${(betFraction * 100).toFixed(2)}% of your bankroll per instance, starting with $${wagerAmount.toFixed(2)} on the first bet. \n        \n        Your expected bankroll after ${bets} bet(s) is $${finalBankroll.toFixed(2)}.`);\n    }\n  };\n  const handleProbabilityChange = e => {\n    const inputValue = e.target.value.replace('%', '');\n    const percentageValue = parseFloat(inputValue) / 100;\n    if (!isNaN(percentageValue)) {\n      setProbability(percentageValue);\n    }\n  };\n  const probabilityNumber = parseFloat(probability);\n  const probabilityFormatted = (probabilityNumber * 100).toFixed(0) + '%';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Kelly Criterion Calculator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"The Kelly Criterion is a formula used to determine the optimal bet size based on an estimated probability of winning and net payout odds.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"The calculator will recommend a bet size and provide an estimate of your expected bankroll growth if you follow the recommended sizing for a specified number of bets.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"bankroll\",\n        children: \"Starting Bankroll:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"bankroll\",\n        name: \"bankroll\",\n        value: `$${bankroll}`,\n        onChange: e => setBankroll(parseFloat(e.target.value.replace('$', ''))),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"payoff\",\n        children: \"Net Payout Odds (X:1):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        id: \"payoff\",\n        name: \"payoff\",\n        value: payoff,\n        onChange: e => setPayoff(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"probability\",\n        children: \"Probability of Winning:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"probability\",\n        name: \"probability\",\n        maxLength: \"4\",\n        pattern: \"^[0-9]{1,3}%?$\",\n        value: probabilityFormatted,\n        onChange: handleProbabilityChange,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"bets\",\n        children: \"Number of Bets:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        id: \"bets\",\n        name: \"bets\",\n        value: bets,\n        onChange: e => setbets(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Calculate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"result\",\n      children: result\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"8yq9t2MG3jII71SkvfjoZO0H50Y=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","bankroll","setBankroll","payoff","setPayoff","probability","setProbability","bets","setbets","result","setResult","handleSubmit","event","preventDefault","f","betFraction","Math","min","wagerAmount","expectedGrowthRate","finalBankroll","toFixed","handleProbabilityChange","e","inputValue","target","value","replace","percentageValue","parseFloat","isNaN","probabilityNumber","probabilityFormatted","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","id","name","onChange","required","maxLength","pattern","_c","$RefreshReg$"],"sources":["/Users/clayreimus/Documents/KellyCalc/kelly-criterion-calculator/src/App.js"],"sourcesContent":["import React, { useState } from 'react'\nimport './style.css'\n\nfunction App() {\n  const [bankroll, setBankroll] = useState(100)\n  const [payoff, setPayoff] = useState(1)\n  const [probability, setProbability] = useState(0.6)\n  const [bets, setbets] = useState(1)\n  const [result, setResult] = useState('')\n\n  const handleSubmit = (event) => {\n    event.preventDefault()\n\n    const f = (payoff * probability - (1 - probability)) / payoff\n    const betFraction = Math.min(f, 1)\n    const wagerAmount = betFraction * bankroll\n    const expectedGrowthRate = 1 + betFraction * probability\n    const finalBankroll = bankroll * expectedGrowthRate ** bets\n\n    if (betFraction <= 0) {\n      setResult(\n        'This bet has a negative expected value. This calculator is only helpful for bet sizing in games where the player believes they have an edge.'\n      )\n    } else {\n      setResult(\n        `Bet ${(betFraction * 100).toFixed(\n          2\n        )}% of your bankroll per instance, starting with $${wagerAmount.toFixed(\n          2\n        )} on the first bet. \n        \n        Your expected bankroll after ${bets} bet(s) is $${finalBankroll.toFixed(\n          2\n        )}.`\n      )\n    }\n  }\n\n  const handleProbabilityChange = (e) => {\n    const inputValue = e.target.value.replace('%', '')\n    const percentageValue = parseFloat(inputValue) / 100\n    if (!isNaN(percentageValue)) {\n      setProbability(percentageValue)\n    }\n  }\n\n  const probabilityNumber = parseFloat(probability)\n  const probabilityFormatted = (probabilityNumber * 100).toFixed(0) + '%'\n\n  return (\n    <div className=\"container\">\n      <h1>Kelly Criterion Calculator</h1>\n      <p>\n        The Kelly Criterion is a formula used to determine the optimal bet size\n        based on an estimated probability of winning and net payout odds.\n      </p>\n      <p>\n        The calculator will recommend a bet size and provide an estimate of your\n        expected bankroll growth if you follow the recommended sizing for a\n        specified number of bets.\n      </p>\n\n      <form onSubmit={handleSubmit}>\n        <label htmlFor=\"bankroll\">Starting Bankroll:</label>\n        <input\n          type=\"text\"\n          id=\"bankroll\"\n          name=\"bankroll\"\n          value={`$${bankroll}`}\n          onChange={(e) =>\n            setBankroll(parseFloat(e.target.value.replace('$', '')))\n          }\n          required\n        />\n\n        <label htmlFor=\"payoff\">Net Payout Odds (X:1):</label>\n        <input\n          type=\"number\"\n          id=\"payoff\"\n          name=\"payoff\"\n          value={payoff}\n          onChange={(e) => setPayoff(e.target.value)}\n          required\n        />\n\n        <label htmlFor=\"probability\">Probability of Winning:</label>\n        <input\n          type=\"text\"\n          id=\"probability\"\n          name=\"probability\"\n          maxLength=\"4\"\n          pattern=\"^[0-9]{1,3}%?$\"\n          value={probabilityFormatted}\n          onChange={handleProbabilityChange}\n          required\n        />\n\n        <label htmlFor=\"bets\">Number of Bets:</label>\n        <input\n          type=\"number\"\n          id=\"bets\"\n          name=\"bets\"\n          value={bets}\n          onChange={(e) => setbets(e.target.value)}\n          required\n        />\n\n        <button type=\"submit\">Calculate</button>\n      </form>\n\n      <div id=\"result\">{result}</div>\n    </div>\n  )\n}\n\nexport default App\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}